DROP TABLE IF EXISTS EC_URL_LINK;
DROP VIEW IF EXISTS EC_PAGE_VIEW;

DROP TABLE IF EXISTS DISC_DOMAIN_TAG;
DROP TABLE IF EXISTS DISC_TAG;
DROP TABLE IF EXISTS DISC_USER;

DROP TABLE IF EXISTS EC_DOMAIN_NEIGHBORS;
DROP TABLE IF EXISTS EC_FEED_URL;
DROP TABLE IF EXISTS EC_DOMAIN_LINK;
DROP TABLE IF EXISTS EC_PAGE_DATA;
DROP TABLE IF EXISTS EC_URL;
DROP TABLE IF EXISTS EC_DOMAIN;
DROP TABLE IF EXISTS EC_TOP_DOMAIN;
DROP TABLE IF EXISTS EC_URL_DETAILS;
DROP VIEW IF EXISTS EC_URL_VIEW;
DROP VIEW IF EXISTS EC_URL_PART_HASH;

DROP TABLE IF EXISTS EC_URL_WORD;
DROP TABLE IF EXISTS EC_DICTIONARY;
DROP TABLE IF EXISTS DOMAIN_METADATA;

CREATE TABLE IF NOT EXISTS DOMAIN_METADATA (
    ID INT PRIMARY KEY,
    KNOWN_URLS INT DEFAULT 0,
    VISITED_URLS INT DEFAULT 0,
    GOOD_URLS INT DEFAULT 0
);

CREATE TABLE IF NOT EXISTS EC_TOP_DOMAIN (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    URL_PART VARCHAR(255) UNIQUE NOT NULL,
    ALIVE BOOLEAN DEFAULT TRUE NOT NULL
)
CHARACTER SET utf8mb4
COLLATE utf8mb4_unicode_ci;

CREATE TABLE IF NOT EXISTS EC_DOMAIN (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    URL_PART VARCHAR(255) UNIQUE NOT NULL,
    INDEXED INT DEFAULT 0 NOT NULL,
    QUALITY DOUBLE DEFAULT -5 NOT NULL,
    QUALITY_RAW DOUBLE DEFAULT -5 NOT NULL,
    QUALITY_ORIGINAL DOUBLE DEFAULT -5 NOT NULL,

    URL_TOP_DOMAIN_ID INT NOT NULL,
    URL_SUBDOMAIN VARCHAR(255) NOT NULL,
    STATE INT DEFAULT 0 NOT NULL,

    RANK DOUBLE,

    DOMAIN_ALIAS INTEGER,

    INDEX_DATE TIMESTAMP DEFAULT NOW(),
    DISCOVER_DATE TIMESTAMP DEFAULT NOW(),

    FOREIGN KEY (URL_TOP_DOMAIN_ID) REFERENCES EC_TOP_DOMAIN(ID) ON DELETE CASCADE
)
CHARACTER SET utf8mb4
COLLATE utf8mb4_unicode_ci;

CREATE TABLE IF NOT EXISTS EC_DOMAIN_HISTORY (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    URL_PART  VARCHAR(255) UNIQUE NOT NULL,
    QUALITY_MEASURE DOUBLE DEFAULT -5 NOT NULL,
    INBOUND_LINKS INT DEFAULT 1,
    LINK_ADJUSTED_QUALITY DOUBLE GENERATED ALWAYS AS (0.3*QUALITY_MEASURE + 0.7*QUALITY_MEASURE / GREATEST(1, INBOUND_LINKS)),
    RANK DOUBLE
)
CHARACTER SET utf8mb4
COLLATE utf8mb4_unicode_ci;

CREATE TABLE IF NOT EXISTS EC_DOMAIN_BLACKLIST (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    URL_DOMAIN  VARCHAR(255) UNIQUE NOT NULL
)
CHARACTER SET utf8mb4
COLLATE utf8mb4_unicode_ci;

CREATE TABLE IF NOT EXISTS EC_URL (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    DOMAIN_ID INT NOT NULL,
    PROTO ENUM('http','https','gemini') NOT NULL,
    URL VARCHAR(255) NOT NULL,
    PORT INT,

    VISITED BOOLEAN NOT NULL DEFAULT FALSE,
    DATA_HASH INTEGER,
    QUALITY_MEASURE DOUBLE,

    STATE ENUM('ok', 'redirect', 'dead', 'archived', 'disqualified') NOT NULL DEFAULT 'ok',

    IP VARCHAR(32),

    CONSTRAINT CONS UNIQUE (DOMAIN_ID, URL),
    FOREIGN KEY (DOMAIN_ID) REFERENCES EC_DOMAIN(ID) ON DELETE CASCADE
)
CHARACTER SET utf8mb4
COLLATE utf8mb4_unicode_ci;

CREATE TABLE IF NOT EXISTS EC_PAGE_DATA (
    ID INT PRIMARY KEY AUTO_INCREMENT,

    TITLE VARCHAR(255),
    DESCRIPTION VARCHAR(255),

    WORDS_DISTINCT INTEGER,
    WORDS_TOTAL INTEGER,
    FORMAT VARCHAR(8),
    FEATURES INT,

    FOREIGN KEY (ID) REFERENCES EC_URL(ID) ON DELETE CASCADE
)
CHARACTER SET utf8mb4
COLLATE utf8mb4_unicode_ci;

CREATE TABLE EC_FEED_URL (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    DOMAIN_ID INT NOT NULL,
    PROTO VARCHAR(8) NOT NULL,
    URL VARCHAR(255) NOT NULL,
    PORT INT,

    CONSTRAINT CONS UNIQUE (DOMAIN_ID, URL),
    FOREIGN KEY (DOMAIN_ID) REFERENCES EC_DOMAIN(ID) ON DELETE CASCADE
)
CHARACTER SET utf8mb4
COLLATE utf8mb4_unicode_ci;

CREATE TABLE EC_DOMAIN_NEIGHBORS (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    DOMAIN_ID INT NOT NULL,
    NEIGHBOR_ID INT NOT NULL,
    ADJ_IDX INT NOT NULL,

    CONSTRAINT CONS UNIQUE (DOMAIN_ID, ADJ_IDX),
    FOREIGN KEY (DOMAIN_ID) REFERENCES EC_DOMAIN(ID) ON DELETE CASCADE
)
CHARACTER SET utf8mb4
COLLATE utf8mb4_unicode_ci;

CREATE TABLE IF NOT EXISTS EC_DOMAIN_LINK (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    SOURCE_DOMAIN_ID INT NOT NULL,
    DEST_DOMAIN_ID INT NOT NULL,

    CONSTRAINT CONS UNIQUE (SOURCE_DOMAIN_ID, DEST_DOMAIN_ID),

    FOREIGN KEY (SOURCE_DOMAIN_ID) REFERENCES EC_DOMAIN(ID) ON DELETE CASCADE,
    FOREIGN KEY (DEST_DOMAIN_ID) REFERENCES EC_DOMAIN(ID) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS EC_DOMAIN_LINK_AGGREGATE (
    DOMAIN_ID INT PRIMARY KEY NOT NULL,
    LINKS INT
);

CREATE OR REPLACE VIEW EC_URL_VIEW AS
    SELECT
        EC_DOMAIN.URL_PART AS URL_DOMAIN,
        EC_URL.URL AS URL_PATH,
        EC_TOP_DOMAIN.URL_PART AS URL_TOP,
        EC_URL.ID AS ID,
        EC_DOMAIN.ID AS DOMAIN_ID,
        EC_TOP_DOMAIN.ID AS TOP_DOMAIN_ID,
        EC_URL.PROTO AS URL_PROTO,
        EC_URL.PORT AS URL_PORT,
        EC_URL.VISITED AS VISITED,
        EC_URL.DATA_HASH AS DATA_HASH,
        EC_URL.QUALITY_MEASURE AS URL_QUALITY_MEASURE,
        EC_DOMAIN.QUALITY AS DOMAIN_QUALITY_MEASURE,
        EC_DOMAIN.QUALITY_RAW AS QUALITY_RAW,
        EC_PAGE_DATA.TITLE AS TITLE,
        EC_PAGE_DATA.DESCRIPTION AS DESCRIPTION,
        EC_URL.IP AS IP,
        EC_DOMAIN.STATE AS STATE,
        EC_PAGE_DATA.WORDS_TOTAL AS WORDS_TOTAL,
        EC_PAGE_DATA.FORMAT AS FORMAT,
        EC_PAGE_DATA.FEATURES AS FEATURES,
        EC_DOMAIN.RANK AS RANK,
        EC_DOMAIN.STATE AS DOMAIN_STATE
    FROM EC_URL
    LEFT JOIN EC_PAGE_DATA
        ON EC_PAGE_DATA.ID = EC_URL.ID
    INNER JOIN EC_DOMAIN
        ON EC_URL.DOMAIN_ID = EC_DOMAIN.ID
    INNER JOIN EC_TOP_DOMAIN
        ON EC_DOMAIN.URL_TOP_DOMAIN_ID=EC_TOP_DOMAIN.ID;

CREATE OR REPLACE VIEW EC_DISCOVER_TASKS_VIEW AS
    SELECT
        ID,
        URL_PART
    FROM EC_DOMAIN
    WHERE
        DOMAIN_ALIAS IS NULL
    AND INDEXED = 0
    ORDER BY QUALITY DESC, ID ASC;

CREATE OR REPLACE VIEW EC_RELATED_LINKS_VIEW AS
    SELECT
        SOURCE_DOMAIN_ID,
        SOURCE_DOMAIN.URL_PART AS SOURCE_URL,
        SOURCE_TOP_DOMAIN.URL_PART AS SOURCE_TOP_URL,
        DEST_DOMAIN_ID,
        DEST_DOMAIN.URL_PART AS DEST_URL,
        DEST_TOP_DOMAIN.URL_PART AS DEST_TOP_URL
    FROM EC_DOMAIN_LINK
    INNER JOIN EC_DOMAIN AS SOURCE_DOMAIN
        ON SOURCE_DOMAIN.ID=SOURCE_DOMAIN_ID
    INNER JOIN EC_TOP_DOMAIN AS SOURCE_TOP_DOMAIN
        ON SOURCE_TOP_DOMAIN.ID=SOURCE_DOMAIN.URL_TOP_DOMAIN_ID
    INNER JOIN EC_DOMAIN AS DEST_DOMAIN
        ON DEST_DOMAIN.ID=DEST_DOMAIN_ID
    INNER JOIN EC_TOP_DOMAIN AS DEST_TOP_DOMAIN
        ON DEST_TOP_DOMAIN.ID=DEST_DOMAIN.URL_TOP_DOMAIN_ID
    ;

CREATE OR REPLACE VIEW EC_RELATED_LINKS_IN AS
    SELECT
        IN_URL.ID AS SRC_URL_ID,
        IN_URL.QUALITY_MEASURE AS SRC_URL_QUALITY,
        OUT_URL.ID AS DEST_URL_ID,
        OUT_URL.QUALITY_MEASURE AS DEST_URL_QUALITY
    FROM EC_URL AS IN_URL
    INNER JOIN EC_DOMAIN_LINK
        ON IN_URL.DOMAIN_ID=EC_DOMAIN_LINK.SOURCE_DOMAIN_ID
    INNER JOIN EC_URL AS OUT_URL
        ON OUT_URL.DOMAIN_ID=EC_DOMAIN_LINK.DEST_DOMAIN_ID
    WHERE IN_URL.VISITED=TRUE
    AND   IN_URL.DATA_HASH IS NOT NULL
    AND   OUT_URL.VISITED=TRUE
    AND   OUT_URL.DATA_HASH IS NOT NULL;

CREATE TABLE IF NOT EXISTS EC_DOMAIN_BACKLINKS (
    ID INT PRIMARY KEY,
    LINKEDNESS INT
);

CREATE TABLE IF NOT EXISTS EC_API_KEY (
    LICENSE_KEY VARCHAR(255) UNIQUE,
    LICENSE VARCHAR(255) NOT NULL,
    NAME VARCHAR(255) NOT NULL,
    EMAIL VARCHAR(255) NOT NULL,
    RATE INT DEFAULT 10
);

CREATE INDEX IF NOT EXISTS EC_DOMAIN_RANK_INDEX ON EC_DOMAIN (RANK);
CREATE INDEX IF NOT EXISTS EC_DOMAIN_QUALITY_INDEX ON EC_DOMAIN (QUALITY,STATE);

CREATE INDEX IF NOT EXISTS EC_DOMAIN_INDEXED_INDEX ON EC_DOMAIN (INDEXED);
CREATE INDEX IF NOT EXISTS EC_DOMAIN_ID_INDEXED_INDEX ON EC_DOMAIN (ID, INDEXED);
CREATE INDEX IF NOT EXISTS EC_DOMAIN_TRIO ON EC_DOMAIN (STATE, DOMAIN_ALIAS, INDEXED, QUALITY);

CREATE INDEX IF NOT EXISTS EC_URL_VISITED ON EC_URL (VISITED);
CREATE INDEX IF NOT EXISTS EC_URL_VISITED_STATE ON EC_URL (VISITED, STATE);
CREATE INDEX IF NOT EXISTS EC_URL_IP ON EC_URL (IP);

---;

DROP TABLE IF EXISTS REF_DICTIONARY;

CREATE TABLE IF NOT EXISTS REF_DICTIONARY(
    TYPE VARCHAR(16),
    WORD VARCHAR(255),
    DEFINITION VARCHAR(255)
)
CHARACTER SET utf8mb4
COLLATE utf8mb4_unicode_ci;

CREATE INDEX IF NOT EXISTS REF_DICTIONARY_WORD ON REF_DICTIONARY (WORD);

CREATE TABLE IF NOT EXISTS REF_WIKI_TITLE (
    NAME VARCHAR(255),
    NAME_LOWER VARCHAR(255) GENERATED ALWAYS AS (LOWER(NAME)),
    REF_NAME VARCHAR(255)
)
CHARACTER SET utf8mb4
COLLATE utf8mb4_unicode_ci;

CREATE INDEX IF NOT EXISTS REF_WIKI_LOWER ON REF_WIKI_TITLE (NAME_LOWER);
CREATE INDEX IF NOT EXISTS REF_WIKI_NAME ON REF_WIKI_TITLE (NAME);